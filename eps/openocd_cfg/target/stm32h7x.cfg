# script for stm32h7x family

#
# stm32h7 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME stm32h7x
}

if { [info exists CHIPNAME_CPU0_ACTIVATED] } {
   set _CHIPNAME_CPU0_ACTIVATED $CHIPNAME_CPU0_ACTIVATED
} else {
   set _CHIPNAME_CPU0_ACTIVATED 1
}

if { [info exists CHIPNAME_CPU1_ACTIVATED] } {
   set _CHIPNAME_CPU1_ACTIVATED $CHIPNAME_CPU1_ACTIVATED
} else {
   set _CHIPNAME_CPU1_ACTIVATED 1
}

if { [info exists BOARDNAME] } {
   set _BOARDNAME $BOARDNAME
} else {
   set _BOARDNAME stm32h7x_board
}

if { [info exists CONNECT_UNDER_RESET] } {
   set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
   set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
   set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
   set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
   set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
   set _STOP_WATCHDOG 0
}

set _ENDIAN little
set TRACE_CONFIGURED 0
set _RESETINIT 0
set _INITCORE_0 0
set _INITCORE_1 0

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x10000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
	  set _CPUTAPID 0x6ba00477
   } else {
      set _CPUTAPID 0x6ba02477
   }
}

if { [regexp -nocase {stm32h7.5....} $_CHIPNAME] || [regexp -nocase {stm32h7.7....} $_CHIPNAME] } {
	swj_newdap $_CHIPNAME dap -irlen 1 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
} else {
	swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
}

# Target configuration
if { [regexp -nocase {stm32h7.5....} $_CHIPNAME] || [regexp -nocase {stm32h7.7....} $_CHIPNAME]} {
	global _CHIPNAME_CPU0_ACTIVATED
	global _CHIPNAME_CPU1_ACTIVATED

	if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
		target create $_CHIPNAME.cpu0 cortex_m -coreid 0 -endian $_ENDIAN -chain-position $_CHIPNAME.dap
		$_CHIPNAME.cpu0 configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
	}

	if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
		target create $_CHIPNAME.cpu1 cortex_m -coreid 3 -endian $_ENDIAN -chain-position $_CHIPNAME.dap
		$_CHIPNAME.cpu1 configure -work-area-phys 0x38000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
	}

	if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] && [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
		target amp $_CHIPNAME.cpu0 $_CHIPNAME.cpu1
	}
} else {
	target create $_CHIPNAME.cpu0 cortex_m -endian $_ENDIAN -chain-position $_CHIPNAME.cpu
	$_CHIPNAME.cpu0 configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
}

# Flash configuration
if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
	flash bank $_CHIPNAME.flash0 stm32h7x 0x08000000 0 0 0 $_CHIPNAME.cpu0
}

# check for second flash bank (STM32H7xxxI 2Mo have a dual bank flash)
if { [regexp -nocase {stm32h7.3.i..} $_CHIPNAME] || [regexp -nocase {stm32h742.i..} $_CHIPNAME]} {
	# Add the second flash bank
	flash bank $_CHIPNAME.flash1 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cpu0
} else {
	if { [regexp -nocase {stm32h7.5.i..} $_CHIPNAME] || [regexp -nocase {stm32h7.7.i..} $_CHIPNAME]} {
		global _CHIPNAME_CPU1_ACTIVATED

		if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
			# Add the second flash bank
			flash bank $_CHIPNAME.flash1 stm32h7x 0x08100000 0 0 0 $_CHIPNAME.cpu1
		}
	}
}

if { [regexp -nocase {STM32H753I-EVAL} $_BOARDNAME] || [regexp -nocase {STM32H743I-EVAL} $_BOARDNAME]} {
	set _QSPINAME $_CHIPNAME.qspi
	flash bank $_QSPINAME stmqspi 0x90000000 0 0 0 $_CHIPNAME.cpu0 0x52005000
} else {
	# TODO: QSPI for multicore
}

# QUADSPI initialization
# flash = 1: only flash1, = 2: only flash 2, anything else: both flash1 and flash2
# qpi: 4-line mode
proc qspi_init { flash qpi } {
	mmw 0x580244E0 0x000007FF 0				;# RCC_AHB4ENR |= GPIOA-GPIOK (enable clocks)
	mmw 0x580244D4 0x00004000 0				;# RCC_AHB3ENR |= QSPIEN (enable clock)
	sleep 1									;# Wait for clock startup

	# STM32H7[4|5]3 Eval board
	# PG06: BK1_NCS, PB02: CLK, PF06: BK1_IO3, PF7: BK1_IO2, PF9: BK1_IO1, PF8: BK1_IO0
	# PC11: BK2_NCS, PB02: CLK, PG14: BK2_IO3, PG9: BK2_IO2, PH3: BK2_IO1, PH2: BK2_IO0

	# Port B: PB02:AF09
	mmw 0x58020400 0x00000020 0x00000010    ;# MODER
	mmw 0x58020408 0x00000030 0x00000000    ;# OSPEEDR
	mmw 0x58020420 0x00000900 0x00000600    ;# AFRL

	# Port C: PC11:AF09
	mmw 0x58020800 0x00800000 0x00400000    ;# MODER
	mmw 0x58020808 0x00C00000 0x00000000    ;# OSPEEDR
	mmw 0x58020824 0x00009000 0x00006000    ;# AFRH

	# Port F: PF9:AF10, PF8:AF10, PF7:AF09, PF6:AF09
	mmw 0x58021400 0x000AA000 0x00055000    ;# MODER
	mmw 0x58021408 0x000FF000 0x00000000    ;# OSPEEDR
	mmw 0x58021420 0x99000000 0x66000000    ;# AFRL
	mmw 0x58021424 0x000000AA 0x00000055    ;# AFRH

	# Port G: PG14:AF09, PG09:AF09, PG06:AF10
	mmw 0x58021800 0x20082000 0x10041000    ;# MODER
	mmw 0x58021808 0x300C3000 0x00000000    ;# OSPEEDR
	mmw 0x58021820 0x0A000000 0x05000000    ;# AFRL
	mmw 0x58021824 0x09000090 0x06000060    ;# AFRH

	# Port H: PH3:AF09, PH2:AF09
	mmw 0x58021C00 0x000000A0 0x00000050    ;# MODER
	mmw 0x58021C08 0x000000F0 0x00000000    ;# OSPEEDR
	mmw 0x58021C20 0x00009900 0x00006600    ;# AFRL

	# correct FSIZE would be 0x19 or 0x1A, however, this causes trouble when
	# reading the last word at end of bank in memory mapped mode
	# increase fsize as a workaround

	if { $flash == 1 } {
		# for flash 1 only on twin QSPI MT25TL01G
		mww 0x52005000 0x05400018			;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=0, SSHIFT=1, TCEN=1
		mww 0x52005004 0x00190100			;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
	} else {
		if { $flash == 2 } {
			# for flash 2 only on twin QSPI MT25TL01G
			mww 0x52005000 0x05400098		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=1, DFM=0, SSHIFT=1, TCEN=1
			mww 0x52005004 0x00190100		;# QUADSPI_DCR: FSIZE=0x19, CSHT=0x01, CKMODE=0
		} else {
			# for dual flash mode MT25TL01G
			mww 0x52005000 0x05400058		;# QUADSPI_CR: PRESCALER=5, APMS=1, FTHRES=0, FSEL=0, DFM=1, SSHIFT=1, TCEN=1
			mww 0x52005004 0x001A0100		;# QUADSPI_DCR: FSIZE=0x1A, CSHT=0x01, CKMODE=0
		}
	}

	mww 0x52005014 0x0D002503				;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1
	mmw 0x52005000 0x00000001 0				;# QUADSPI_CR: EN=1

	# Exit QPI mode
	mww 0x52005014 0x000003FF				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x3, INSTR=Exit QPI
	sleep 1

	# Enter 4-byte mode
	mww 0x52005014 0x000001B7				;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter 4-byte
	sleep 1

	if { $qpi == 1 } {
		# Enter QPI mode
		mww 0x52005014 0x00000138			;# QUADSPI_CCR: FMODE=0x0, DMODE=0x0, DCYC=0x0, ADSIZE=0x0, ADMODE=0x0, IMODE=0x1, INSTR=Enter QPI
		sleep 1

		# memory-mapped fast read mode with 4-byte addresses and 2 dummy cycles (for read only)
		mww 0x52005014 0x0F083F0B			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x3, DCYC=0x2, ADSIZE=0x3, ADMODE=0x3, IMODE=0x3, INSTR=Fast READ

		# as QSPI is set to instruction/address/data on 4 lines in memory mapped mode, driver will *always*
		# use this setting (i. e. for probe, erase, write)
		# the 'Enter QPI mode' command is chip specific, additionally both w25q256fv must be configured in advance by
		# programming the non-volatile QE bit (bit 1 in status register 2), e. g. by the following commands
		#
		# stmqspi spicmd 2 0 0x06
		# stmqspi spicmd 2 0 0x31 0x02 0x02
		# stmqspi spicmd 2 2 0x35
		#
		# the last one should return  '-> 02 02' to indicate successful setting of QE bit
		# furthemore, the flash chip changes id from 0x1940ef to 0x1960ef upon entering QPI mode
	} else {
		# memory-mapped read mode with 4-byte addresses
		mww 0x52005014 0x0D003503			;# QUADSPI_CCR: FMODE=0x3, DMODE=0x1, DCYC=0x0, ADSIZE=0x3, ADMODE=0x1, IMODE=0x1, INSTR=READ
	}
}

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter_khz $_CLOCK_FREQ

adapter_nsrst_delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
	$_CHIPNAME.cpu0 configure -event trace-config {
	global _CHIPNAME
	global TRACE_CONFIGURED

		targets $_CHIPNAME.cpu0
		# Not done here as device is under reset during examine
		# memory write of this register under reset fails

		# Set TRACE_CLKEN; TRACE_MODE is set to async; when using sync
		# change this value accordingly to configure trace pins
		# assignment
	#	mmw 0x5C001004 0x00100000 0
		set TRACE_CONFIGURED 1
	}

	$_CHIPNAME.cpu0 configure -event reset-end {
	global _CHIPNAME
	global _ENABLE_LOW_POWER
	global _STOP_WATCHDOG
	global TRACE_CONFIGURED
	global _BOARDNAME
	global _CLOCK_FREQ

		targets $_CHIPNAME.cpu0

		if { [expr ($TRACE_CONFIGURED == 1)] } {
			# Set TRACE_CLKEN; TRACE_MODE is set to async; when using sync
			# change this value accordingly to configure trace pins
			# assignment
			mmw 0x5C001004 0x00100000 0
		}

		# Not done in target examine-end because device can be under reset and we get comm errors

		# Enable D3 and D1 DBG clocks
		# DBGMCU_CR |= DBG_CKEN_D3 | DBG_CKEN_D1
		mmw 0x5C001004 0x00600000 0

		if { [expr ($_ENABLE_LOW_POWER == 1)] } {
			# Enable debug during low power modes (uses more power)
			# DBGMCU_CR |= DBG_STANDBY | DBG_STOP | DBG_SLEEP in D3, D2 & D1 Domains
			mmw 0x5C001004 0x000001BF 0
		}
		if { [expr ($_ENABLE_LOW_POWER == 0)] } {
			# Disable debug during low power modes
			# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP | DBG_SLEEP)
			mmw 0x5C001004 0 0x000001BF
		}
		if { [expr ($_STOP_WATCHDOG == 1)] } {
			# Stop watchdog counters during halt
			# DBGMCU_D1APB1_FZ |= DBG_WWDG1_STOP
			mmw 0x5C001034 0x00000040 0
			# DBGMCU_APB3FZ2 |= DBG_WWDG1_STOP
			mmw 0x5C001038 0x00000040 0
			# DBGMCU_D2APB1_FZ |= DBG_WWDG2_STOP
			mmw 0x5C00103C 0x00000800 0
			# DBGMCU_APB1LFZ2 |= DBG_WWDG2_STOP
			mmw 0x5C001040 0x00000800 0
			# DBGMCU_D3APB1_FZ |= DBG_WDGLSD2_STOP | DBG_WDGLSD1_STOP
			mmw 0x5C001054 0x000C0000 0
			# DBGMCU_APB4FZ2 |= DBG_WDGLSD2_STOP | DBG_WDGLSD1_STOP
			mmw 0x5C001058 0x000C0000 0
		}
		if { [expr ($_STOP_WATCHDOG == 0)] } {
			# Don't stop watchdog counters during halt
			# DBGMCU_D1APB1_FZ |= ~DBG_WWDG1_STOP
			mmw 0x5C001034 0 0x00000040
			# DBGMCU_APB3FZ2 |= ~DBG_WWDG1_STOP
			mmw 0x5C001038 0 0x00000040
			# DBGMCU_D2APB1_FZ |= ~DBG_WWDG2_STOP
			mmw 0x5C00103C 0 0x00000800
			# DBGMCU_APB1LFZ2 |= ~DBG_WWDG2_STOP
			mmw 0x5C001040 0 0x00000800
			# DBGMCU_D3APB1_FZ |= ~(DBG_WDGLSD2_STOP | DBG_WDGLSD1_STOP)
			mmw 0x5C001054 0 0x000C0000
			# DBGMCU_APB4FZ2 |= ~(DBG_WDGLSD2_STOP | DBG_WDGLSD1_STOP)
			mmw 0x5C001058 0 0x000C0000
		}
		if { [expr ($_ENABLE_LOW_POWER == 0)] && [expr ($_STOP_WATCHDOG == 0)] } {
			# Disable D3 and D1 DBG clocks
			# DBGMCU_CR |= ~(DBG_CKEN_D3 | DBG_CKEN_D1)
			mmw 0x5C001004 0 0x00600000
		}

		mww 0x52002000 0x00000034				;# FLASH_ACR: 4 WS for 192 MHZ HCLK

		mmw 0x58024400 0x00000001 0x00000018	;# RCC_CR: HSIDIV=1, HSI on
		mmw 0x58024410 0x10000000 0xEE000007	;# RCC_CFGR: MCO2=system, MCO2PRE=8, HSI as system clock
		mww 0x58024418 0x00000040				;# RCC_D1CFGR: D1CPRE=1, D1PRE=1, HPRE=1
		mww 0x5802441C 0x00000440				;# RCC_D2CFGR: D2PRE2=2, D2PRE1=2
		mww 0x58024420 0x00000040				;# RCC_D3CFGR: D3PRE=2
		mww 0x58024428 0x00000040				;# RCC_PPLCKSELR: DIVM3=0, DIVM2=0, DIVM1=4, PLLSRC=HSI
		mmw 0x5802442C 0x0001000C 0x00000002	;# RCC_PLLCFGR: PLL1RGE=8MHz to 16MHz, PLL1VCOSEL=wide
		mww 0x58024430 0x01070217				;# RCC_PLL1DIVR: 192 MHz: DIVR1=2, DIVQ=8, DIVP1=2, DIVN1=24
		mmw 0x58024400 0x01000000 0				;# RCC_CR: PLL1ON=1
		sleep 1
		mmw 0x58024410 0x00000003 0				;# RCC_CFGR: PLL1 as system clock
		sleep 1

		if { [regexp -nocase {STM32H753I-EVAL} $_BOARDNAME] || [regexp -nocase {STM32H743I-EVAL} $_BOARDNAME]} {
			qspi_init 0 0
		}

		adapter_khz $_CLOCK_FREQ
	}

	# Catch gdb-attach event to perform the reset init
	# Using _RESETINIT variable to do the reset init only once
	$_CHIPNAME.cpu0 configure -event gdb-attach {
	global _CHIPNAME
	global _RESETINIT
	global _CONNECT_UNDER_RESET

		targets $_CHIPNAME.cpu0
		# Needed to be able to use the connect_assert_srst in reset_config
		# otherwise, can't read device flash size register
		if { [expr ($_CONNECT_UNDER_RESET == 1)] && [expr ($_RESETINIT == 0)] } {
			reset init
			incr _RESETINIT
		}
	}

	# each gdb-detach on a specified cpu will close all cores and shutdown openocd
	$_CHIPNAME.cpu0 configure -event gdb-detach {
		global _CHIPNAME
		targets $_CHIPNAME.cpu0
		if { [regexp -nocase {stm32h7.5....} $_CHIPNAME] || [regexp -nocase {stm32h7.7....} $_CHIPNAME]} {
			close_core 0
			close_core 3
		}
		# to close connection if debug mode entered
		shutdown
	}
}

if { [regexp -nocase {stm32h7.5....} $_CHIPNAME] || [regexp -nocase {stm32h7.7....} $_CHIPNAME]} {
	global BCTM_ALL
	global BCTM_CPU0_CAN_HALT
	global BCTM_CPU0_CAN_BE_HALTED
	global BCTM_CPU1_CAN_HALT
	global BCTM_CPU1_CAN_BE_HALTED
	global _CHIPNAME_CPU0_ACTIVATED
	global _CHIPNAME_CPU1_ACTIVATED

	if { ([expr ($_CHIPNAME_CPU0_ACTIVATED == 1)]) &&
		 ([info exists BCTM_ALL] || 
		 [info exists BCTM_CPU0_CAN_HALT] || 
		 [info exists BCTM_CPU0_CAN_BE_HALTED]) } {
		$_CHIPNAME.cpu0 configure -event gdb-start {
		global _CHIPNAME
		global _CHIPNAME_CPU0_ACTIVATED
		global _CHIPNAME_CPU1_ACTIVATED

			if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu1
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
			if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu0
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
		}
	}

	if { ([expr ($_CHIPNAME_CPU1_ACTIVATED == 1)]) &&
		 ([info exists BCTM_ALL] || 
		 [info exists BCTM_CPU1_CAN_HALT] || 
		 [info exists BCTM_CPU1_CAN_BE_HALTED]) } {
		$_CHIPNAME.cpu1 configure -event gdb-start {
		global _CHIPNAME
		global _CHIPNAME_CPU0_ACTIVATED
		global _CHIPNAME_CPU1_ACTIVATED

			if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu0
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
			if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu1
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
		}
	}

	if { ([expr ($_CHIPNAME_CPU0_ACTIVATED == 1)]) &&
		 ([info exists BCTM_ALL] || 
		 [info exists BCTM_CPU0_CAN_HALT] || 
		 [info exists BCTM_CPU0_CAN_BE_HALTED]) } {
		$_CHIPNAME.cpu0 configure -event resume-start {
		global _CHIPNAME
		global _CHIPNAME_CPU0_ACTIVATED
		global _CHIPNAME_CPU1_ACTIVATED

			if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu1
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
			if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu0
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
		}
	}

	if { ([expr ($_CHIPNAME_CPU1_ACTIVATED == 1)]) &&
		 ([info exists BCTM_ALL] || 
		 [info exists BCTM_CPU1_CAN_HALT] || 
		 [info exists BCTM_CPU1_CAN_BE_HALTED]) } {
		$_CHIPNAME.cpu1 configure -event resume-start {
		global _CHIPNAME
		global _CHIPNAME_CPU0_ACTIVATED
		global _CHIPNAME_CPU1_ACTIVATED

			if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu0
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
			if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
				targets $_CHIPNAME.cpu1
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000
			}
		}
	}

	if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
		$_CHIPNAME.cpu0 configure -event examine-start {
		global BCTM_ALL
		global BCTM_CPU0_CAN_HALT
		global BCTM_CPU0_CAN_BE_HALTED
		global BCTM_CPU1_CAN_HALT
		global BCTM_CPU1_CAN_BE_HALTED
		global _CHIPNAME
		targets $_CHIPNAME.cpu0
		global _INITCORE_0
			if {[expr ($_INITCORE_0 == 0)]} {
				init_core 0
				incr _INITCORE_0
			}
		}

		$_CHIPNAME.cpu0 configure -event examine-end {
		global BCTM_ALL
		global BCTM_CPU0_CAN_HALT
		global BCTM_CPU0_CAN_BE_HALTED
		global BCTM_CPU1_CAN_HALT
		global BCTM_CPU1_CAN_BE_HALTED
		global _CHIPNAME_CPU1_ACTIVATED
		global _CHIPNAME

			targets $_CHIPNAME.cpu0

			if { [info exists BCTM_ALL] || [info exists BCTM_CPU0_CAN_HALT] || [info exists BCTM_CPU0_CAN_BE_HALTED] } {
				# CTI ENABLED
				mww 0xe0043000 0x00000001
				# CM7 DBGRESTART
				mww 0xe00430bc 0x00000002

				if { [info exists BCTM_ALL] || [info exists BCTM_CPU0_CAN_HALT] } {
					# CM7 HALTED
					mww 0xe0043020 0x00000001
				} else {
					# CM7 HALTED
					mww 0xe0043020 0x00000000
				}

				if { [info exists BCTM_ALL] || [info exists BCTM_CPU0_CAN_BE_HALTED] } {
					# CM7 EDBGRQ
					mww 0xe00430a0 0x00000001
				} else {
					# CM7 EDBGRQ
					mww 0xe00430a0 0x00000000
				}
			} else {
				if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
					targets $_CHIPNAME.cpu1
					# Acknowledge
					mww 0xe0043010 0x00000001
					mww 0xe0043010 0x00000000
				}
				targets $_CHIPNAME.cpu0
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000

				mww 0xe004313a 0x00000000
				# CM7 DBGRESTART
				mww 0xe00430bc 0x00000000
				# CTI DISABLED
				mww 0xe0043000 0x00000000
			}
		}
	}

	if { [expr ($_CHIPNAME_CPU1_ACTIVATED == 1)] } {
		$_CHIPNAME.cpu1 configure -event examine-start {
		global BCTM_ALL
		global BCTM_CPU0_CAN_HALT
		global BCTM_CPU0_CAN_BE_HALTED
		global BCTM_CPU1_CAN_HALT
		global BCTM_CPU1_CAN_BE_HALTED
		global _CHIPNAME
		global _INITCORE_1

			targets $_CHIPNAME.cpu1
			if {[expr ($_INITCORE_1 == 0)]} {
				init_core 3
				incr _INITCORE_1
			}
		}

		$_CHIPNAME.cpu1 configure -event examine-end {
		global BCTM_ALL
		global BCTM_CPU0_CAN_HALT
		global BCTM_CPU0_CAN_BE_HALTED
		global BCTM_CPU1_CAN_HALT
		global BCTM_CPU1_CAN_BE_HALTED
		global _CHIPNAME_CPU0_ACTIVATED
		global _CHIPNAME

			targets $_CHIPNAME.cpu1
			if { [info exists BCTM_ALL] || [info exists BCTM_CPU1_CAN_HALT] || [info exists BCTM_CPU1_CAN_BE_HALTED] } {
				# CTI ENABLED
				mww 0xe0043000 0x00000001
				# CM4 DBGRESTART
				mww 0xe00430bc 0x00000002

				if { [info exists BCTM_ALL] || [info exists BCTM_CPU1_CAN_HALT] } {
					# CM4 HALTED
					mww 0xe0043020 0x00000001
				} else {
					# CM4 HALTED
					mww 0xe0043020 0x00000000
				}

				if { [info exists BCTM_ALL] || [info exists BCTM_CPU1_CAN_BE_HALTED] } {
					# CM4 EDBGRQ
					mww 0xe00430a0 0x00000001
				} else {
					# CM4 EDBGRQ
					mww 0xe00430a0 0x00000000
				}
			} else {
				if { [expr ($_CHIPNAME_CPU0_ACTIVATED == 1)] } {
					targets $_CHIPNAME.cpu0
					# Acknowledge
					mww 0xe0043010 0x00000001
					mww 0xe0043010 0x00000000
				}
				targets $_CHIPNAME.cpu1
				# Acknowledge
				mww 0xe0043010 0x00000001
				mww 0xe0043010 0x00000000

				mww 0xe004313a 0x00000000
				# CM4 DBGRESTART
				mww 0xe00430bc 0x00000000
				# CTI DISABLED
				mww 0xe0043000 0x00000000
			}
		}

		$_CHIPNAME.cpu1 configure -event gdb-attach {
		global _CHIPNAME
		global _RESETINIT
		global _CONNECT_UNDER_RESET
		targets $_CHIPNAME.cpu1
			# Needed to be able to use the connect_assert_srst in reset_config
			# otherwise, can't read device flash size register
			if { [expr ($_CONNECT_UNDER_RESET == 1)] && [expr ($_RESETINIT == 0)] } {
				reset init
				incr _RESETINIT
			}
		}

		$_CHIPNAME.cpu1 configure -event gdb-detach {
		global _CHIPNAME
		targets $_CHIPNAME.cpu1
			# to close connection if debug mode entered
			close_core 0
			close_core 3
			shutdown
		}
	}
}
